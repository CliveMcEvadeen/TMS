<?php

namespace App\Http\Controllers\Auth;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Support\Facades\Log;
use App\Models\User;

class LoginController extends Controller
{
    use AuthenticatesUsers;

    protected $redirectTo = RouteServiceProvider::HOME;

    public function __construct()
    {
        $this->middleware('guest')->except('logout');
    }

    protected function login(Request $request)
    {
        $credentials = $request->validate([
            'identifier' => 'required', // This could be email or tenant_id based on how they login
            'password' => 'required',
            'g-recaptcha-response' => 'recaptcha',
        ]);

        // Log the login attempt
        Log::info('Login attempt', ['identifier' => $credentials['identifier']]);

        // Find user by email or tenant ID
        $user = User::where('email', $credentials['identifier'])
                    ->orWhere('tenant_id', $credentials['identifier'])
                    ->first();

        if ($user) {
            // Log user found
            Log::info('User found', ['user_id' => $user->id, 'email' => $user->email]);

            // Check if password is valid
            if (Auth::attempt([
                'email' => $user->email,
                'password' => $credentials['password']
            ])) {
                Log::info('Password validated successfully', ['user_id' => $user->id]);

                // Check user role and redirect accordingly
                if ($user->hasRole('rental-staff')) {
                    Log::info('Rental manager logged in', ['user_id' => $user->id]);
                    return redirect()->route('payments.index');
                } elseif ($user->hasRole('rental-staff')) {
                    Log::info('Tenant logged in', ['user_id' => $user->id]);
                    return redirect()->route('dashboard');
                } else {
                    // Log role mismatch
                    Log::warning('User has no valid role', ['user_id' => $user->id]);
                    return redirect()->back()->withErrors(['identifier' => 'Access denied, no valid role.']);
                }
            } else {
                Log::warning('Invalid password attempt', ['user_id' => $user->id]);
            }
        } else {
            Log::warning('No valid user found', ['identifier' => $credentials['identifier']]);
        }

        return redirect()->back()->withInput()->withErrors(['identifier' => 'These credentials do not match our records!']);
    }
}
